/*
    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * @defgroup CAN CAN Driver
 * @brief Generic CAN Driver.
 * @details This module implements a generic CAN (Controller Area Network)
 *          driver allowing the exchange of information at frame level.
 * @pre     In order to use the CAN driver the @p HAL_USE_CAN option
 *          must be enabled in @p halconf.h.
 *
 * @section can_1 Driver State Machine
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @if LATEX_PDF
 * @dot
  digraph example {
    size="5, 7";
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true", width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    stop  [label="CAN_STOP\nLow Power"];
    uninit [label="CAN_UNINIT", style="bold"];
    starting [label="CAN_STARTING\nInitializing"];
    ready [label="CAN_READY\nClock Enabled"];
    sleep [label="CAN_SLEEP\nLow Power"];

    uninit -> stop [label=" canInit()", constraint=false];
    stop -> stop [label="\ncanStop()"];
    stop -> ready [label="\ncanStart()\n(fast implementation)"];
    stop -> starting [label="\ncanStart()\n(slow implementation)"];
    starting -> ready [label="\ninitialization complete\n(all threads)"];
    ready -> stop [label="\ncanStop()"];
    ready -> ready [label="\ncanReceive()\ncanTransmit()"];
    ready -> sleep [label="\ncanSleep()"];
    sleep -> sleep [label="\ncanSleep()"];
    sleep -> ready [label="\ncanWakeup()"];
    sleep -> ready [label="\nhardware\nwakeup event"];
  }
 * @enddot
 * @else
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true", width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    stop  [label="CAN_STOP\nLow Power"];
    uninit [label="CAN_UNINIT", style="bold"];
    starting [label="CAN_STARTING\nInitializing"];
    ready [label="CAN_READY\nClock Enabled"];
    sleep [label="CAN_SLEEP\nLow Power"];

    uninit -> stop [label=" canInit()", constraint=false];
    stop -> stop [label="\ncanStop()"];
    stop -> ready [label="\ncanStart()\n(fast implementation)"];
    stop -> starting [label="\ncanStart()\n(slow implementation)"];
    starting -> starting [label="\ncanStart()\n(other thread)"];
    starting -> ready [label="\ninitialization complete\n(all threads)"];
    ready -> stop [label="\ncanStop()"];
    ready -> ready [label="\ncanStart()\ncanReceive()\ncanTransmit()"];
    ready -> sleep [label="\ncanSleep()"];
    sleep -> sleep [label="\ncanSleep()"];
    sleep -> ready [label="\ncanWakeup()"];
    sleep -> ready [label="\nhardware\nwakeup event"];
  }
 * @enddot
 * @endif
 *
 * @ingroup HAL_NORMAL_DRIVERS
 */
