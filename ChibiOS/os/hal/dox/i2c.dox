/*
    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * @defgroup I2C I2C Driver
 * @brief   Generic I2C Driver.
 * @details This module implements a generic I2C (Inter-Integrated Circuit)
 *          driver.
 * @pre     In order to use the I2C driver the @p HAL_USE_I2C option
 *          must be enabled in @p halconf.h.
 *
 * @section i2c_1 Driver State Machine
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @if LATEX_PDF
 * @dot
  digraph example {
    size="5, 7";
    rankdir="LR";

    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true",
          width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    stop [label="I2C_STOP\nLow Power"];
    uninit [label="I2C_UNINIT", style="bold"];
    ready [label="I2C_READY\nClock Enabled"];
    active_tx [label="I2C_ACTIVE_TX\nBus TX Active"];
    active_rx [label="I2C_ACTIVE_RX\nBus RX Active"];
    locked [label="I2C_LOCKED\nBus Locked"];

    uninit -> stop [label="i2cInit()", constraint=false];
    stop -> stop [label="i2cStop()"];
    stop -> ready [label="i2cStart()"];
    ready -> ready [label="i2cStart()"];
    ready -> stop [label="i2cStop()"];
    ready -> active_tx [label="i2cMasterTransmit()"];
    ready -> active_rx [label="i2cMasterReceive()"];
    active_tx -> ready [label="completed"];
    active_rx -> ready [label="completed"];
    active_tx -> locked [label="RDY_TIMEOUT"];
    active_rx -> locked [label="RDY_TIMEOUT"];
    locked -> stop [label="i2cStop()"];
    locked -> ready [label="i2cStart()"];
  }
 * @else
 * @dot
  digraph example {
    rankdir="LR";

    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true",
          width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    stop [label="I2C_STOP\nLow Power"];
    uninit [label="I2C_UNINIT", style="bold"];
    ready [label="I2C_READY\nClock Enabled"];
    active_tx [label="I2C_ACTIVE_TX\nBus TX Active"];
    active_rx [label="I2C_ACTIVE_RX\nBus RX Active"];
    locked [label="I2C_LOCKED\nBus Locked"];

    uninit -> stop [label="i2cInit()", constraint=false];
    stop -> stop [label="i2cStop()"];
    stop -> ready [label="i2cStart()"];
    ready -> ready [label="i2cStart()"];
    ready -> stop [label="i2cStop()"];
    ready -> active_tx [label="i2cMasterTransmit()"];
    ready -> active_rx [label="i2cMasterReceive()"];
    active_tx -> ready [label="completed"];
    active_rx -> ready [label="completed"];
    active_tx -> locked [label="RDY_TIMEOUT"];
    active_rx -> locked [label="RDY_TIMEOUT"];
    locked -> stop [label="i2cStop()"];
    locked -> ready [label="i2cStart()"];
  }
 * @enddot
 * @endif
 * The driver is not thread safe for performance reasons, if you need to access
 * the I2C bus from multiple threads then use the @p i2cAcquireBus() and
 * @p i2cReleaseBus() APIs in order to gain exclusive access.
 *
 * @ingroup HAL_NORMAL_DRIVERS
 */
